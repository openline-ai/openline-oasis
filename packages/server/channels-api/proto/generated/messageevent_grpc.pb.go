// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: messageevent.proto

package proto

import (
	context "context"
	generated "github.com/openline-ai/openline-customer-os/packages/server/message-store-api/proto/generated"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageEventServiceClient is the client API for MessageEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageEventServiceClient interface {
	SendMessageEvent(ctx context.Context, in *generated.InputMessage, opts ...grpc.CallOption) (*generated.MessageId, error)
}

type messageEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageEventServiceClient(cc grpc.ClientConnInterface) MessageEventServiceClient {
	return &messageEventServiceClient{cc}
}

func (c *messageEventServiceClient) SendMessageEvent(ctx context.Context, in *generated.InputMessage, opts ...grpc.CallOption) (*generated.MessageId, error) {
	out := new(generated.MessageId)
	err := c.cc.Invoke(ctx, "/MessageEventService/sendMessageEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageEventServiceServer is the server API for MessageEventService service.
// All implementations must embed UnimplementedMessageEventServiceServer
// for forward compatibility
type MessageEventServiceServer interface {
	SendMessageEvent(context.Context, *generated.InputMessage) (*generated.MessageId, error)
	mustEmbedUnimplementedMessageEventServiceServer()
}

// UnimplementedMessageEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageEventServiceServer struct {
}

func (UnimplementedMessageEventServiceServer) SendMessageEvent(context.Context, *generated.InputMessage) (*generated.MessageId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageEvent not implemented")
}
func (UnimplementedMessageEventServiceServer) mustEmbedUnimplementedMessageEventServiceServer() {}

// UnsafeMessageEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageEventServiceServer will
// result in compilation errors.
type UnsafeMessageEventServiceServer interface {
	mustEmbedUnimplementedMessageEventServiceServer()
}

func RegisterMessageEventServiceServer(s grpc.ServiceRegistrar, srv MessageEventServiceServer) {
	s.RegisterService(&MessageEventService_ServiceDesc, srv)
}

func _MessageEventService_SendMessageEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(generated.InputMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageEventServiceServer).SendMessageEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessageEventService/sendMessageEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageEventServiceServer).SendMessageEvent(ctx, req.(*generated.InputMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageEventService_ServiceDesc is the grpc.ServiceDesc for MessageEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MessageEventService",
	HandlerType: (*MessageEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendMessageEvent",
			Handler:    _MessageEventService_SendMessageEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messageevent.proto",
}
