// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: grpc/grpc.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OmniChannelsClient is the client API for OmniChannels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OmniChannelsClient interface {
	SendMessage(ctx context.Context, in *OmniMessage, opts ...grpc.CallOption) (*Empty, error)
	SendMail(ctx context.Context, in *OmniMessage, opts ...grpc.CallOption) (*Empty, error)
}

type omniChannelsClient struct {
	cc grpc.ClientConnInterface
}

func NewOmniChannelsClient(cc grpc.ClientConnInterface) OmniChannelsClient {
	return &omniChannelsClient{cc}
}

func (c *omniChannelsClient) SendMessage(ctx context.Context, in *OmniMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc.OmniChannels/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omniChannelsClient) SendMail(ctx context.Context, in *OmniMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc.OmniChannels/SendMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmniChannelsServer is the server API for OmniChannels service.
// All implementations must embed UnimplementedOmniChannelsServer
// for forward compatibility
type OmniChannelsServer interface {
	SendMessage(context.Context, *OmniMessage) (*Empty, error)
	SendMail(context.Context, *OmniMessage) (*Empty, error)
	mustEmbedUnimplementedOmniChannelsServer()
}

// UnimplementedOmniChannelsServer must be embedded to have forward compatible implementations.
type UnimplementedOmniChannelsServer struct {
}

func (UnimplementedOmniChannelsServer) SendMessage(context.Context, *OmniMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedOmniChannelsServer) SendMail(context.Context, *OmniMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
}
func (UnimplementedOmniChannelsServer) mustEmbedUnimplementedOmniChannelsServer() {}

// UnsafeOmniChannelsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OmniChannelsServer will
// result in compilation errors.
type UnsafeOmniChannelsServer interface {
	mustEmbedUnimplementedOmniChannelsServer()
}

func RegisterOmniChannelsServer(s grpc.ServiceRegistrar, srv OmniChannelsServer) {
	s.RegisterService(&OmniChannels_ServiceDesc, srv)
}

func _OmniChannels_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OmniMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniChannelsServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.OmniChannels/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniChannelsServer).SendMessage(ctx, req.(*OmniMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmniChannels_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OmniMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmniChannelsServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.OmniChannels/SendMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmniChannelsServer).SendMail(ctx, req.(*OmniMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// OmniChannels_ServiceDesc is the grpc.ServiceDesc for OmniChannels service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OmniChannels_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.OmniChannels",
	HandlerType: (*OmniChannelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _OmniChannels_SendMessage_Handler,
		},
		{
			MethodName: "SendMail",
			Handler:    _OmniChannels_SendMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/grpc.proto",
}

// MessageStoreClient is the client API for MessageStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageStoreClient interface {
	SaveMessage(ctx context.Context, in *OmniMessage, opts ...grpc.CallOption) (*Empty, error)
}

type messageStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageStoreClient(cc grpc.ClientConnInterface) MessageStoreClient {
	return &messageStoreClient{cc}
}

func (c *messageStoreClient) SaveMessage(ctx context.Context, in *OmniMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/grpc.MessageStore/SaveMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageStoreServer is the server API for MessageStore service.
// All implementations must embed UnimplementedMessageStoreServer
// for forward compatibility
type MessageStoreServer interface {
	SaveMessage(context.Context, *OmniMessage) (*Empty, error)
	mustEmbedUnimplementedMessageStoreServer()
}

// UnimplementedMessageStoreServer must be embedded to have forward compatible implementations.
type UnimplementedMessageStoreServer struct {
}

func (UnimplementedMessageStoreServer) SaveMessage(context.Context, *OmniMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMessage not implemented")
}
func (UnimplementedMessageStoreServer) mustEmbedUnimplementedMessageStoreServer() {}

// UnsafeMessageStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageStoreServer will
// result in compilation errors.
type UnsafeMessageStoreServer interface {
	mustEmbedUnimplementedMessageStoreServer()
}

func RegisterMessageStoreServer(s grpc.ServiceRegistrar, srv MessageStoreServer) {
	s.RegisterService(&MessageStore_ServiceDesc, srv)
}

func _MessageStore_SaveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OmniMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageStoreServer).SaveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MessageStore/SaveMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageStoreServer).SaveMessage(ctx, req.(*OmniMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageStore_ServiceDesc is the grpc.ServiceDesc for MessageStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.MessageStore",
	HandlerType: (*MessageStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveMessage",
			Handler:    _MessageStore_SaveMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/grpc.proto",
}
