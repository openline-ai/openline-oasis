#! /bin/bash

# Build, Deploy and clean Images
NS="oasis-dev"
echo "script is $0"

# OASIS_LOCAL_MINIKUBE_HOME is the directory that contains this script
OASIS_LOCAL_MINIKUBE_HOME="$(dirname $(readlink -f $0))"

#OASIS HOME is relative to the current script directory.
# This variable needs to be updates if we ever change the script location
OASIS_HOME="$OASIS_LOCAL_MINIKUBE_HOME/../../../"
echo "OASIS_HOME=$OASIS_HOME"
echo "OASIS_LOCAL_MINIKUBE_HOME=$OASIS_LOCAL_MINIKUBE_HOME"

if [[ $(kubectl get namespaces) == *"$NS"* ]]; then
  echo " --- Namespace: $NS --- "
else
  echo " --- Creating $NS namespace ---"
  kubectl create -f "$OASIS_LOCAL_MINIKUBE_HOME/oasis-dev.json"
  wait
fi

declare -a OasisServices=("message-store" "channels-api" "oasis-api")

cd $OASIS_HOME

function docker_build() {
  echo "--- $1 docker build ---"
  docker build -t ghcr.io/openline-ai/openline-oasis/"$1":otter -f "$1"/Dockerfile .
}

function docker_rm() {
  echo "--- $1 docker rm ---"
  docker image rm ghcr.io/openline-ai/openline-oasis/"$1":otter
}

function minikube_image_load() {
  echo "--- $1 minikube load ---"
  minikube image load ghcr.io/openline-ai/openline-oasis/"$1":otter
}

function minikube_image_unload() {
  echo "--- $1 minikube unload ---"
  minikube image unload ghcr.io/openline-ai/openline-oasis/"$1":otter
}

function kubectl_apply() {
  echo "--- $1 kubectl apply ---"
  find "$OASIS_LOCAL_MINIKUBE_HOME/apps-config" -name "*$1*.yaml" -type f -exec kubectl apply --namespace "$NS" -f {} \;
}

function kubectl_delete() {
  echo "--- $1 kubectl delete ---"
  kubectl delete deployments/"$1" service/"$1"-service --namespace "$NS" --cascade=foreground
}

function setUp() {
  kubectl_delete "$1"
  minikube_image_unload "$1"
  docker_build "$1"
  minikube_image_load "$1"
  kubectl_apply "$1"
}

function tearDown() {
  kubectl_delete "$1"
  minikube_image_unload "$1"
  docker_rm "$1"
}

if [ "x$1" == "xdelns" ]; then
  kubectl delete namespaces "$NS"
fi

if [ "x$1" == "xbuild" ]; then
  if [ -z "$2" ]; then
    # tearUp all oasis services
    for service in "${OasisServices[@]}"; do
      setUp "$service"
    done
  else
    setUp "$2"
  fi
fi

if [ "x$1" == "xdel" ]; then
  if [ -z "$2" ]; then
    for service in "${OasisServices[@]}"; do
      tearDown "$service"
    done

  else
    tearDown "$1"
  fi
fi

if [ "x$1" == "xsvc" ]; then
  kubectl get svc -n "$NS"
fi

if [ "x$1" == "xdeploy" ]; then
  kubectl get deploy -n "$NS"
fi

if [ "x$1" == "xall" ]; then
  kubectl get all -n "$NS"
fi

if [ "x$1" == "xpods" ]; then
  kubectl get pods -n "$NS"
fi

if [ "x$1" == "xpostgres" ]; then
  if [ -z "$2" ]; then
    echo "postgres minikube load"
    minikube image load postgres:13.4 --pull
    echo "postgres kubectl apply"
    find "$OASIS_LOCAL_MINIKUBE_HOME/postgres" -name "*.yaml" -type f -exec kubectl apply --namespace "$NS" -f {} \;
  else
    echo "postgres kubectl delete"
    kubectl delete deployments/oasis-"$1" service/oasis-"$1"-service --namespace "$NS" --cascade=foreground
  fi
fi

if [ "x$1" == "xrestart" ]; then
  if [ -z "$2" ]; then
    for service in "${OasisServices[@]}"; do
      echo "restart $1"
      tearDown "$service"
    done
  else
    echo "restart $2"
    kubectl rollout restart -n "$NS" deployment/"$2"
  fi
fi

if [ "x$1" == "xhelp" ]; then
  echo "                 --- oasis-cli commands ---                       "
  echo "--- oasis-cli build               build and deploy all services"
  echo "--- oasis-cli build message-store build message-store docker and deploys it to minikube"
  echo "--- oasis-cli del message-store   removes message store from minikube and docker---"
  echo "--- oasis-cli del                 removes all services from minikube and docker---"
  echo "--- oasis-cli delns               removes oasis namespace"
  echo "--- oasis-cli svc                 list all services"
  echo "--- oasis-cli deploy:             list all deployments"
  echo "--- oasis-cli pods:               list all pods"
  echo "--- oasis-cli all:                list all resources"
  echo "--- oasis-cli help:               oasis-cli help"
  echo "--- oasis-cli postgres:           build postgres"

  echo "--- oasis-cli restart message-store: build postgres"
fi
